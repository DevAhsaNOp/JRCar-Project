@model JRCar.BOL.Validation_Classes.ValidationPayment

@{
    ViewBag.Title = "Make Payment";
    Layout = "~/Views/Shared/_StarterPortal.cshtml";
}
<style>
    .card-header {
        border-bottom: 1px solid rgba(239,239,239,0.9) !important;
        padding: 0.4rem 1.25rem !important;
    }

    .select2-container {
        width: inherit !important;
    }

    .select2-container--default .select2-selection--multiple .select2-selection__choice {
        background-color: #007eff;
    }

    .select2-container--default .select2-selection--multiple .select2-selection__choice__remove {
        color: #fff !important;
    }

    #loader {
        position: absolute;
        z-index: 1;
        width: 100%;
        height: 85%;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: not-allowed;
        background: #ffffff59;
    }
</style>
@if (User.Identity.IsAuthenticated)
{
    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <h1>Make Payment</h1>
                </div>
                <div class="col-sm-6">
                    <ol class="breadcrumb float-sm-right">
                        <li class="breadcrumb-item"><a href="#">Home</a></li>
                        <li class="breadcrumb-item active">Make Payment</li>
                    </ol>
                </div>
            </div>
        </div>
    </section>
    <section class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-10 col-sm-12 col-lg-10">
                    @if (TempData["SuccessMsg"] != null)
                    {
                        <div class="alert alert-info alert-dismissable">
                            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                            <i class="icon-info-with-circle"></i><span>@Html.Raw(TempData["SuccessMsg"])</span>
                        </div>
                    }
                    @if (TempData["ErrorMsg"] != null)
                    {
                        <div class="alert alert-danger alert-dismissable">
                            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                            <i class="icon-blocked"></i><span>@Html.Raw(TempData["ErrorMsg"])</span>
                        </div>
                    }
                </div>
            </div>
        </div>
    </section>
    <section class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-md-10 col-sm-12 col-lg-10">
                    <div class="card card-primary">
                        <div class="card-header">
                            <h3 class="card-title">Add New Showroom Payment</h3>
                        </div>
                        @using (Html.BeginForm("MakePayment", "Portal", FormMethod.Post, htmlAttributes: new { @id = "MakePayShow" }))
                        {
                            <div id="loader" style="display: none!important;">
                                <img src="~/Content/Spinner-1s-200px.gif" alt="Please Wait......" width="100" height="100" />
                            </div>
                            <div class="card-body" id="MakePayShow">
                                <h6 class="bg-gradient-blue p-1 text-center"><b>Note: </b>Insert the correct Information</h6>
                                <h4 class="text-left"><b>Showroom Information</b></h4>
                                <div class="row">
                                    <div class="col-md-6 col-lg-6 col-sm-12">
                                        <div class="form-group">
                                            <label for="exampleInputBorder">Showroom Name</label>
                                            @Html.ValidationMessageFor(model => model.ShowroomID, "", new { @class = "text-danger" })
                                            @Html.DropDownListFor(model => model.ShowroomID, (IEnumerable<SelectListItem>)ViewBag.Dealers, htmlAttributes: new { @class = "form-control select2bs4" })
                                        </div>
                                    </div>
                                    <div class="col-md-6 col-lg-6 col-sm-12">
                                        <div class="form-group">
                                            <label for="exampleInputBorder">Showroom Address </label>
                                            @Html.EditorFor(model => model.ShowroomAddress, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-md-6 col-lg-6 col-sm-12">
                                        <div class="form-group">
                                            <label for="exampleInputBorder">Showroom Phone Number</label>
                                            @Html.EditorFor(model => model.ShowroomNumber, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                        </div>
                                    </div>
                                </div>
                                <div id="RecSec">
                                    <h5 class="text-left bg-gradient-blue text-center p-1"><b class="text-white">Previous Outstanding Months Information</b></h5>
                                    <div class="row">
                                        <div class="col-md-12 col-lg-12 col-sm-12">
                                            <div class="form-group">
                                                <label for="exampleInputBorder">Months</label>
                                                <div class="form-control" readonly="readonly" style="user-select: none !important; height: fit-content;" id="RecievableDateD" name="RecievableDate"></div>
                                            </div>
                                        </div>
                                        <div class="col-md-6 col-lg-6 col-sm-12">
                                            <div class="form-group">
                                                <label for="exampleInputBorder">Previous Balance</label>
                                                @Html.EditorFor(model => model.PBalance, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @style = "color: black;font-weight: 600;" } })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div id="RecAmou">
                                    <h5 class="text-left bg-gradient-blue text-center p-1"><b class="text-white">Recieved Amount Information</b></h5>
                                    <div class="row">
                                        <div class="col-md-6 col-lg-6 col-sm-12">
                                            <div class="form-group">
                                                <label for="exampleInputBorder">Current Amount</label>
                                                @Html.ValidationMessageFor(model => model.CAmount, "", new { @class = "text-danger" })
                                                @Html.EditorFor(model => model.CAmount, new { htmlAttributes = new { @class = "form-control", @Value = "0", oninput = "this.value = this.value.replace(/[^0-9]/g, '').replace(/(\\..*)\\./g, '$1');" } })
                                            </div>
                                        </div>
                                        <div class="col-md-6 col-lg-6 col-sm-12">
                                            <div class="form-group">
                                                <label for="exampleInputBorder">Recievable Amount</label>
                                                @Html.ValidationMessageFor(model => model.Recievable, "", new { @class = "text-danger" })
                                                @Html.EditorFor(model => model.Recievable, new { htmlAttributes = new { @class = "form-control", @style = "color: black;font-weight: 600;", @readonly = "readonly", @Value = "0", oninput = "this.value = this.value.replace(/[^0-9]/g, '').replace(/(\\..*)\\./g, '$1');" } })
                                            </div>
                                        </div>
                                        <div class="col-md-6 col-lg-6 col-sm-12">
                                            <div class="form-group">
                                                <label for="exampleInputBorder">Recieved Amount</label>
                                                @Html.ValidationMessageFor(model => model.Recieved, "", new { @class = "text-danger" })
                                                @Html.EditorFor(model => model.Recieved, new { htmlAttributes = new { @class = "form-control", @Value = "0", oninput = "this.value = this.value.replace(/[^0-9]/g, '').replace(/(\\..*)\\./g, '$1');" } })
                                            </div>
                                        </div>
                                        <div class="col-md-6 col-lg-6 col-sm-12">
                                            <div class="form-group">
                                                <label for="exampleInputBorder">Discount</label>
                                                @Html.ValidationMessageFor(model => model.Discount, "", new { @class = "text-danger" })
                                                @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control", @Value = "0", oninput = "this.value = this.value.replace(/[^0-9]/g, '').replace(/(\\..*)\\./g, '$1');" } })
                                            </div>
                                        </div>
                                        <div class="col-md-6 col-lg-6 col-sm-12">
                                            <div class="form-group">
                                                <label for="exampleInputBorder">Balance Amount</label>
                                                @Html.ValidationMessageFor(model => model.Balance, "", new { @class = "text-danger" })
                                                @Html.EditorFor(model => model.Balance, new { htmlAttributes = new { @class = "form-control", @Value = "0", @style = "color: black;font-weight: 600;", @readonly = "readonly", oninput = "this.value = this.value.replace(/[^0-9]/g, '').replace(/(\\..*)\\./g, '$1');" } })
                                            </div>
                                        </div>
                                        <div class="col-md-6 col-lg-6 col-sm-12">
                                            <div class="form-group">
                                                <label for="exampleInputBorder">Months</label>
                                                @Html.ValidationMessageFor(model => model.RecievedDate, "", new { @class = "text-danger" })
                                                @Html.DropDownListFor(model => model.RecievedDate, (IEnumerable<SelectListItem>)ViewBag.Months, htmlAttributes: new { @class = "form-control select2", @multiple = "multiple" })
                                                <p class="bg-gradient-danger p-1 mt-1" id="PayError"></p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="card-footer">
                                <button type="submit" class="btn btn-primary" id="MakePay">Submit</button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </section>
    <script>
        document.getElementById('PaysNav').classList.add('active')
        document.getElementById('MakePaymentPage').classList.add('active')
        var CAmount = document.getElementById('CAmount');
        var PBalance = document.getElementById('PBalance');
        var ReAmount = document.getElementById('Recievable');
        var RAmount = document.getElementById('Recieved');
        var DAmount = document.getElementById('Discount');
        var BAmount = document.getElementById('Balance');
        CAmount.addEventListener('input', updateValue);
        RAmount.addEventListener('input', updateBalance);
        DAmount.addEventListener('input', updateBalance);

        function updateValue() {
            ReAmount.value = eval(CAmount.value - PBalance.value);
        }

        function updateBalance() {
            BAmount.value = eval(RAmount.value - (ReAmount.value - DAmount.value));
        }
    </script>
}
